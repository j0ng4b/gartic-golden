name: deploy

on:
  workflow_run:
    workflows: [test]
    branches: [main, ci]
    types:
      - completed

permissions:
  contents: write

jobs:
  tagging:
    runs-on: ubuntu-latest
    if: ${{ github.event.workflow_run.conclusion == 'success' }}

    steps:
    - name: Clone the repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Get tag from commit (if any)
      if: "contains(github.event.workflow_run.head_commit.message, 'bump: v')"
      run: |
        COMMIT_TAG="${{ github.event.workflow_run.head_commit.message }}"
        COMMIT_TAG=$(echo "$COMMIT_TAG" | cut -d' ' -f2)
        echo "COMMIT_TAG=$COMMIT_TAG" >> $GITHUB_ENV

    - name: Generate Git Tag
      id: generate_tag
      run: |
        if [ -n "$COMMIT_TAG" ]; then
          NEW_TAG=$COMMIT_TAG
        else
          latest_tag="$(git tag --list "v*" --sort=-version:refname | head -n 1)"
          echo $latest_tag
          [ -z "$latest_tag" ] && latest_tag=v0.0.0

          major_minor=$(echo "$latest_tag" | cut -d'.' -f-2)
          patch=$(echo "$latest_tag" | cut -d'.' -f3)
          patch=$(( $patch + 1 ))

          NEW_TAG="${major_minor}.${patch}"
        fi

        echo "Generated new tag: $NEW_TAG"
        echo "NEW_TAG=$NEW_TAG" >> $GITHUB_ENV

    - name: Generate changelog
      id: generate_changelog
      run: |
        latest_tag="$(git tag --list "v*" --sort=-version:refname | head -n 1)"
        changelog=$(git log $latest_tag..HEAD --pretty=format:"- %s")
        echo "Changelog between $latest_tag and $NEW_TAG:"
        echo "$changelog"
        {
          echo 'CHANGELOG<<EOF'
          echo "$changelog"
          echo 'EOF'
        } >> $GITHUB_ENV

    #- name: Push Git Tag
    #  run: |
    #    git config user.name "GitHub Actions"
    #    git config user.email "github-actions@users.noreply.github.com"
    #    git tag -a $NEW_TAG -m "New version $NEW_TAG"$'\n\n'"Changes:"$'\n'"$CHANGELOG"
    #    git push origin $NEW_TAG

  build-windows:
    runs-on: windows-latest
    steps:
    - name: Check out repository
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: 3.8

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pyinstaller -r requirements.txt

    - name: Build executable with PyInstaller
      run: |
        pyinstaller --onefile --noconsole main.py
        mkdir -p dist/windows
        mv dist/main.exe dist/windows/gartic-golden.exe

    - name: Upload Windows executable
      uses: actions/upload-artifact@v3
      with:
        name: GarticGolden-windows
        path: dist/windows/gartic-golden.exe

  build-linux:
    runs-on: ubuntu-latest
    steps:
    - name: Check out repository
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: 3.8

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pyinstaller -r requirements.txt

    - name: Build executable with PyInstaller
      run: |
        pyinstaller --onefile main.py
        mkdir -p dist/linux
        mv dist/main dist/linux/gartic-golden

    - name: Upload Linux executable
      uses: actions/upload-artifact@v3
      with:
        name: GarticGolden-linux
        path: dist/linux/gartic-golden

  deploy:
    runs-on: ubuntu-latest

    steps:
    - name: Clone the repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Check if server files had changed
      id: check_server_files
      uses: tj-actions/changed-files@v46.0.3
      with:
        files: |
          requirements.txt
          main.py
          game/*.py

    - name: Deploy to server
      if: steps.check_server_files.outputs.any_changed == 'true'
      uses: appleboy/scp-action@master
      with:
        host: ${{ secrets.SERVER_ADDRESS }}
        username: ${{ secrets.SERVER_USER }}
        key: ${{ secrets.SERVER_SSH_KEY }}
        port: ${{ secrets.SERVER_SSH_PORT }}
        source: >
          requirements.txt,
          main.py,
          game/*.py
        target: "gg"

    - name: Restart project
      if: steps.check_server_files.outputs.any_changed == 'true'
      uses: appleboy/ssh-action@v0.1.3
      with:
        host: ${{ secrets.SERVER_ADDRESS }}
        username: ${{ secrets.SERVER_USER }}
        key: ${{ secrets.SERVER_SSH_KEY }}
        port: ${{ secrets.SERVER_SSH_PORT }}
        script: |
          tmux send-keys -t gg.0 C-c
          tmux send-keys -t gg.0 'python3 main.py -s' C-m